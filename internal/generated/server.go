// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all hosts
	// (GET /api/v1/hosts)
	GetApiV1Hosts(c *gin.Context, params GetApiV1HostsParams)
	// Register a new host
	// (POST /api/v1/hosts)
	PostApiV1Hosts(c *gin.Context)
	// Deregister host
	// (DELETE /api/v1/hosts/{id})
	DeleteApiV1HostsId(c *gin.Context, id int)
	// Get host by ID
	// (GET /api/v1/hosts/{id})
	GetApiV1HostsId(c *gin.Context, id int)
	// Update host
	// (PUT /api/v1/hosts/{id})
	PutApiV1HostsId(c *gin.Context, id int)
	// Update host heartbeat
	// (POST /api/v1/hosts/{id}/heartbeat)
	PostApiV1HostsIdHeartbeat(c *gin.Context, id int)
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Hosts operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Hosts(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1HostsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1Hosts(c, params)
}

// PostApiV1Hosts operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Hosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1Hosts(c)
}

// DeleteApiV1HostsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1HostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiV1HostsId(c, id)
}

// GetApiV1HostsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1HostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1HostsId(c, id)
}

// PutApiV1HostsId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1HostsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiV1HostsId(c, id)
}

// PostApiV1HostsIdHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1HostsIdHeartbeat(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1HostsIdHeartbeat(c, id)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/hosts", wrapper.GetApiV1Hosts)
	router.POST(options.BaseURL+"/api/v1/hosts", wrapper.PostApiV1Hosts)
	router.DELETE(options.BaseURL+"/api/v1/hosts/:id", wrapper.DeleteApiV1HostsId)
	router.GET(options.BaseURL+"/api/v1/hosts/:id", wrapper.GetApiV1HostsId)
	router.PUT(options.BaseURL+"/api/v1/hosts/:id", wrapper.PutApiV1HostsId)
	router.POST(options.BaseURL+"/api/v1/hosts/:id/heartbeat", wrapper.PostApiV1HostsIdHeartbeat)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
}
