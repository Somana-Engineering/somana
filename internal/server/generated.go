// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	// Error Error message
	Error *string `json:"error,omitempty"`
}

// Resource defines model for Resource.
type Resource struct {
	// Active Whether the resource is active
	Active bool `json:"active"`

	// CreatedAt When the resource was created
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt When the resource was deleted (soft delete)
	DeletedAt *time.Time `json:"deleted_at"`

	// Description Description of the resource
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the resource
	Id int64 `json:"id"`

	// Name Name of the resource
	Name string `json:"name"`

	// UpdatedAt When the resource was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// ResourceCreateRequest defines model for ResourceCreateRequest.
type ResourceCreateRequest struct {
	// Description Description of the resource
	Description *string `json:"description,omitempty"`

	// Name Name of the resource
	Name string `json:"name"`
}

// ResourceUpdateRequest defines model for ResourceUpdateRequest.
type ResourceUpdateRequest struct {
	// Active Whether the resource is active
	Active *bool `json:"active,omitempty"`

	// Description Description of the resource
	Description *string `json:"description,omitempty"`

	// Name Name of the resource
	Name *string `json:"name,omitempty"`
}

// GetApiV1ResourcesParams defines parameters for GetApiV1Resources.
type GetApiV1ResourcesParams struct {
	// Active Filter by active status
	Active *bool `form:"active,omitempty" json:"active,omitempty"`
}

// PostApiV1ResourcesJSONRequestBody defines body for PostApiV1Resources for application/json ContentType.
type PostApiV1ResourcesJSONRequestBody = ResourceCreateRequest

// PutApiV1ResourcesIdJSONRequestBody defines body for PutApiV1ResourcesId for application/json ContentType.
type PutApiV1ResourcesIdJSONRequestBody = ResourceUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all resources
	// (GET /api/v1/resources)
	GetApiV1Resources(c *gin.Context, params GetApiV1ResourcesParams)
	// Create a new resource
	// (POST /api/v1/resources)
	PostApiV1Resources(c *gin.Context)
	// List active resources
	// (GET /api/v1/resources/active)
	GetApiV1ResourcesActive(c *gin.Context)
	// Delete resource
	// (DELETE /api/v1/resources/{id})
	DeleteApiV1ResourcesId(c *gin.Context, id int)
	// Get resource by ID
	// (GET /api/v1/resources/{id})
	GetApiV1ResourcesId(c *gin.Context, id int)
	// Update resource
	// (PUT /api/v1/resources/{id})
	PutApiV1ResourcesId(c *gin.Context, id int)
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Resources operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Resources(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1ResourcesParams

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", c.Request.URL.Query(), &params.Active)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter active: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1Resources(c, params)
}

// PostApiV1Resources operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Resources(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1Resources(c)
}

// GetApiV1ResourcesActive operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ResourcesActive(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1ResourcesActive(c)
}

// DeleteApiV1ResourcesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1ResourcesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiV1ResourcesId(c, id)
}

// GetApiV1ResourcesId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ResourcesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1ResourcesId(c, id)
}

// PutApiV1ResourcesId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1ResourcesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiV1ResourcesId(c, id)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/resources", wrapper.GetApiV1Resources)
	router.POST(options.BaseURL+"/api/v1/resources", wrapper.PostApiV1Resources)
	router.GET(options.BaseURL+"/api/v1/resources/active", wrapper.GetApiV1ResourcesActive)
	router.DELETE(options.BaseURL+"/api/v1/resources/:id", wrapper.DeleteApiV1ResourcesId)
	router.GET(options.BaseURL+"/api/v1/resources/:id", wrapper.GetApiV1ResourcesId)
	router.PUT(options.BaseURL+"/api/v1/resources/:id", wrapper.PutApiV1ResourcesId)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
}
