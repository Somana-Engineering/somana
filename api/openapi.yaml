openapi: 3.0.0
info:
  title: Somana API
  version: 1.0.0
  description: API for managing Linux hosts in the Somana system
  contact:
    name: API Support
    email: support@somana.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.somana.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check
      description: Check if the API is running
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  message:
                    type: string
                    example: "Somana API is running"
                  version:
                    type: string
                    example: "1.0.0"

  /api/v1/hosts:
    get:
      summary: List all hosts
      description: Retrieve a list of all Linux hosts
      tags:
        - Hosts
      parameters:
        - name: status
          in: query
          description: Filter by host status
          schema:
            type: string
            enum: [online, offline, maintenance]
        - name: environment
          in: query
          description: Filter by environment
          schema:
            type: string
            enum: [production, staging, development, testing]
      responses:
        '200':
          description: List of hosts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Host'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Register a new host
      description: Register a new Linux host with the system
      tags:
        - Hosts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostCreateRequest'
      responses:
        '201':
          description: Host registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/hosts/{id}:
    get:
      summary: Get host by ID
      description: Retrieve a specific host by its ID
      tags:
        - Hosts
      parameters:
        - name: id
          in: path
          required: true
          description: Host ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Host details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '404':
          description: Host not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update host
      description: Update an existing host
      tags:
        - Hosts
      parameters:
        - name: id
          in: path
          required: true
          description: Host ID
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostUpdateRequest'
      responses:
        '200':
          description: Host updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Host not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Deregister host
      description: Deregister a host (soft delete)
      tags:
        - Hosts
      parameters:
        - name: id
          in: path
          required: true
          description: Host ID
          schema:
            type: integer
            minimum: 1
      responses:
        '204':
          description: Host deregistered successfully
        '404':
          description: Host not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/hosts/{id}/heartbeat:
    post:
      summary: Update host heartbeat
      description: Update host status and system information
      tags:
        - Hosts
      parameters:
        - name: id
          in: path
          required: true
          description: Host ID
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostHeartbeatRequest'
      responses:
        '200':
          description: Heartbeat updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '404':
          description: Host not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Host:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the host
          example: 1
        hostname:
          type: string
          description: Hostname of the system
          example: "web-server-01"
          maxLength: 255
        ip_address:
          type: string
          description: Primary IP address
          example: "192.168.1.100"
        os_name:
          type: string
          description: Operating system name
          example: "Ubuntu"
        os_version:
          type: string
          description: Operating system version
          example: "22.04.3 LTS"
        environment:
          type: string
          description: Environment classification
          enum: [production, staging, development, testing]
          example: "production"
        status:
          type: string
          description: Current host status
          enum: [online, offline, maintenance]
          example: "online"
        created_at:
          type: string
          format: date-time
          description: When the host was registered
          example: "2025-08-03T12:16:39.158615-04:00"
        updated_at:
          type: string
          format: date-time
          description: When the host was last updated
          example: "2025-08-03T14:01:28.38132-04:00"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: When the host was deregistered (soft delete)
          example: null
      required:
        - id
        - hostname
        - ip_address
        - os_name
        - os_version
        - environment
        - status
        - created_at
        - updated_at

    HostCreateRequest:
      type: object
      properties:
        hostname:
          type: string
          description: Hostname of the system
          example: "web-server-01"
          maxLength: 255
        ip_address:
          type: string
          description: Primary IP address
          example: "192.168.1.100"
        os_name:
          type: string
          description: Operating system name
          example: "Ubuntu"
        os_version:
          type: string
          description: Operating system version
          example: "22.04.3 LTS"
        environment:
          type: string
          description: Environment classification
          enum: [production, staging, development, testing]
          example: "production"
      required:
        - hostname
        - ip_address
        - os_name
        - os_version
        - environment

    HostUpdateRequest:
      type: object
      properties:
        hostname:
          type: string
          description: Hostname of the system
          example: "web-server-01"
          maxLength: 255
        ip_address:
          type: string
          description: Primary IP address
          example: "192.168.1.100"
        environment:
          type: string
          description: Environment classification
          enum: [production, staging, development, testing]
          example: "production"
        status:
          type: string
          description: Current host status
          enum: [online, offline, maintenance]
          example: "online"

    HostHeartbeatRequest:
      type: object
      properties:
        status:
          type: string
          description: Current host status
          enum: [online, offline, maintenance]
          example: "online"

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Host not found"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key for authentication 